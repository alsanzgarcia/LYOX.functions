font.size = tfs,
font.name = "Arial",
align.t = "l",
doc.landscape = FALSE,
sort = 1,
col_keys = c(),
header.names = list(),
digits = 1,
merge.col.names = "none",
padding = "d",
rotate  = "n",
header.ht = "d",
col.width = "d",
col.width.j = c(),
add.footer.script = FALSE)
report <- add_table(report, table.object = table.object,
title = 'Abbreviations',
bkm = 'TAB_abbrev')
report     <- body_add_break(x = report)
setwd("G:/Shared drives/LYO-X-UTILITIES/LYOXtoolbox/Mlx-REPORT/Mlx-scaling-report/Report-docx-inputs-1.8 - Copy/Report/pgm")
# -----------------------------------------------------------------------------/
#
#	LYO-X GmbH
#
# Author: Pascal Schulthess
# Date:   October 7 2019
#
# Function: Generate scaling report with PK modeling of NHP, allometric scaling
#           to human, and simulations in human
#
# Dependencies:
#  - Packages: officer, flextable
#  - Functions (in '../../R-Library/'): dataFrame2table.v3.8,
#                                       mlx.run.analysis.v5.0.0 (requires dataFrame2table.v3.2 to be loaded),
#                                       mlx-pop-par2table_v5.0.9
#                                       cov-tables
#
# Inputs:
#  - Template with title page and styles in '../Template/scaling-report-template-cambria.docx'
#  - Text in '../text/' as .txt and .docx files
#  - Figures directly from '../../DataExploration/', '../../Modeling/' and '../../Simulations/' folders,
#    or re-formatted figures from '../Figures/'
#
# Output: Word report saved under '../Report/'
#
# -----------------------------------------------------------------------------/
rm(list = ls())
library(dplyr)
library(officer)
library(flextable)
# Clean up
rm(list = ls())
# Get file location and name
activedoc <- rstudioapi::getActiveDocumentContext()
# Set the working directory to the file location
setwd(dirname(activedoc$path))
R.library.path <- '../R-Library/R-Library-V1/'
source(paste0('../R-Library/LYOX_setup_R.V2.0.6.R'))
run.date <- Sys.Date()
# -----------------------------------------------------------------------------/
#                                                                              /
# Sources and output settings                                               ----
#                                                                              /
# -----------------------------------------------------------------------------/
# -----------------------------------------------------------------------------/
# _ Sources                                                                 ----
# -----------------------------------------------------------------------------/
# Template
template.file          <- "../Template/scaling-report-template-cambria.docx"
# Report name
DRUG                   <- "ABC-123"
report.file            <- paste0("../Report/", DRUG, "-PK-scaling-report_", run.date, ".docx")
# Analysis data sets
analysis.data.set.pk   <- "../../Modelling/monolix.runs/DataSet/PK_2020-07-15.csv"
analysis.data.set.pkpd <- "../../DataProgramming/DataSet/PK.PD_2020-07-15.csv"
ADD.DATA               <- FALSE
# QC output
QC.output.pk           <- "../../DataProgramming/DataQC/Reports/data_report_PK_2020-07-15_run_2020-07-15.txt"
# Data exploration
expl.profiles.dir      <- "../../DataExploration/Figures/"
# Modeling
# PK model development directory
pk.model.dir           <- "../../Modeling/monolix.runs/"
# PK structural model in mlxtran language
mlxtran.pk.model       <-  "../../Modelling/monolix.runs/Model/infusion_2cpt_constRtot_kintKDR0_VClQV2_fix-kon.txt"
# Final PK model
pk.final.model.run     <- "../../Modelling/monolix.runs/run008-1.mlxtran"
pk.final.model.dir     <- "../../Modelling/monolix.runs/run008-1/"
pk.final.model.fig.dir <- "../../Modelling/monolix.runs/run008-1/ChartsFigures/"
# Simulations
# Simulations results folder
sim.fig.dir            <- "../../Modelling/simulx.simulations/Figures/V1/"
# Simulations model file
sim.model              <- "../../Modelling/simulx.simulations/pgm/run008-1_simulx/run008-1_simulxModel.txt"
# -----------------------------------------------------------------------------/
# _ Output settings                                                         ----
# -----------------------------------------------------------------------------/
# Figure size
pk.model.plot       <- 100  # Figure size of structural PK model
expl.cov.plot       <- 280  # Figure size of exploratory covariate plot
expl.profiles.plot  <- 500  # Figure size of exploratory PK plots
indiv.plot          <- 190  # Figure size of individual fits plots
VPC.plot            <- 195  # Figure size of VPC plots
diag.plot           <- 160  # Figure size of other diagnostic plots
sim.plot            <- 240  # Figure size of simulation plots
# Table font size
tfs                 <- 9
# -----------------------------------------------------------------------------/
# _ text functions                                                 ----
# -----------------------------------------------------------------------------/
# Header
add_header <- function(report,
text  = NULL, # header tex
style = NULL  # heading 1, heading 2, heading 3
){
report         <- body_add_par(x = report, value = text, style = style)
return(report)
}
# Docx text sections
add_section <- function(report,
path = NULL # path to docx file
){
report         <- body_add_docx(x = report, src = path)
return(report)
}
# Add page break
add_break <- function(report){
report         <- body_add_break(x = report)
return(report)
}
# Add txt files like the simulx model code, mlxtran project file etc
add_txt <- function(report,
path = NULL, #path to the txt file
style = 'Code' #typally 'Code' or "HTML Preformatted"
){
body.text <- scan(path, what = "", sep = "\n", quiet = TRUE, blank.lines.skip = FALSE)
report    <- body_add_par(x = report, value = paste0("Source: ", path), style = "figNote")
for (i in seq(1, length(body.text))) {
report <- body_add_par(x = report, value = body.text[i], style = style)
}
return(report)
}
# -----------------------------------------------------------------------------/
# _ Figure function                                                 ----
# -----------------------------------------------------------------------------/
bkm.fig.list <- NULL
add_figure <- function(report,
title,           # figure title, will appear in the list of figures
caption = NULL,  # figure caption, does not appear in the list of figures
bkm     = NULL,  # bookmark for referencing in word document
path    = NULL,  # path to png file
position.title   = 'above', # 'above' or 'below'
position.caption = 'below', # 'above' or 'below', if position.title == 'below', automatically set to 'below' as well
print.source = TRUE, # Set it to FALSE if you do not want the source of
# the figure to be added in MS Word below the figure
# (typically, when the source is already printed on the figure)
do.not.print = TRUE, # in case you do NOT want to print the figure, e.g. for setting up a new report
# size of figure. use width.abs OR width (+ height)
width.abs = NULL, # width in inches, 6.24 is the maximum to fill the width of a standard A4 page
width     = NULL, # width factor,  needs to be the same as height
height    = NULL  # height factor, needs to be the same as width. If null, and width is provided, uses the same as width
){
# If figure title does not end with a '.', add it
if(grepl('\\.$', title) == FALSE){
title <- paste0(title, '.')
}
# Check if caption ends with '.'. If not, add it
if(!is.null(caption) && grepl('\\.$', caption) == FALSE){
caption <- paste0(caption, '.')
}
# vector of bookmarks, check if bookmark already exists
if(is.null(bkm.fig.list)){
bkm.fig.list <<- c(bkm)
}else{
# check if it already is in the list
# if so, stop execution and give this information
if(bkm %in% bkm.fig.list){
stop(paste0('Bookmark name (', bkm, ') already taken'))
}
# if not, add it
bkm.fig.list <<- c(bkm.fig.list, bkm)
}
# Read figure properties
if(do.not.print == FALSE){
dims    <- attr(png::readPNG(path), "dim")
if(!is.null(width.abs)){
width  = width.abs / dims[2]
height = width
}
if(is.null(height)){
height = width
}
}
#
if(position.title == 'below'){
position.caption = 'below'
}
# Read figure
run_num <- run_autonum(seq_id = "figure", pre_label = "Figure ", post_label = ": ",
bkm = bkm, bkm_all = TRUE, prop = NULL)
# Figure title
Title.0pt <- block_caption(title, style = "Title.0pt", autonum = run_num) # 0pt paragraph after figure title
Title.6pt <- block_caption(title, style = "Title.6pt", autonum = run_num) # 6pt paragraph after figure title
# Write
if(position.title == 'above' & position.caption == 'above'){
# Title - caption - figure - source
report   <- body_add(report, Title.0pt)
if(!is.null(caption)){report <- body_add_par(x = report, value = caption, style = "Caption.0pt")}
if(do.not.print == FALSE){
if(print.source == TRUE){
report  <- body_add_img(x = report, src = path,
width    = dims[2]*width,
height   = dims[1]*height,
style    = "Centrd.0pt")
}else{
report  <- body_add_img(x = report, src = path,
width    = dims[2]*width,
height   = dims[1]*height,
style    = "Centrd.6pt")
}
}
if(print.source == TRUE){
report <- body_add_par(x = report, value = paste0("Source: ", path), style = "Caption.6pt")
}
}else if(position.title == 'above' & position.caption == 'below'){
# Title - figure - caption - source
report   <- body_add(report, Title.0pt)
if(do.not.print == FALSE){
if(print.source == TRUE | !is.null(caption)){
report  <- body_add_img(x = report, src = path,
width    = dims[2]*width,
height   = dims[1]*height,
style    = "Centrd.0pt")
}else{
report  <- body_add_img(x = report, src = path,
width    = dims[2]*width,
height   = dims[1]*height,
style    = "Centrd.6pt")
}
}
if(!is.null(caption)){
if(print.source == TRUE){
report <- body_add_par(x = report, value = caption, style = "Caption.0pt")
}else{
report <- body_add_par(x = report, value = caption, style = "Caption.6pt")
}
}
if (print.source == TRUE) {
report <- body_add_par(x = report, value = paste0("Source: ", path), style = "Source.6pt")
}
}else if(position.title == 'below'){
# figure - Title - caption - source
if(do.not.print == FALSE){
report  <- body_add_img(x = report, src = path,
width    = dims[2]*width,
height   = dims[1]*height,
style    = "Centrd.0pt")
}
if(print.source == TRUE | !is.null(caption)){
report   <- body_add(report, Title.0pt)
}else{
report   <- body_add(report, Title.6pt)
}
if(!is.null(caption)){
if(print.source == TRUE){
report <- body_add_par(x = report, value = caption, style = "Caption.0pt")}
}else{
report <- body_add_par(x = report, value = caption, style = "Caption.6pt")
}
if (print.source == TRUE) {
report <- body_add_par(x = report, value = paste0("Source: ", path), style = "Source.6pt")
}
}else{
stop('Check add_figure functionality ')
}
return(report)
}
# -----------------------------------------------------------------------------/
# _ Table function                                                 ----
# -----------------------------------------------------------------------------/
bkm.tab.list <- NULL
add_table <- function(report,
title,           # table title, will appear in the list of tables
caption = NULL,  # table description, does not appear in the list of tables
position.title   = 'above', # 'above' or 'below'
position.caption = 'below', # 'above' or 'below', if position.title == 'below', automatically set to 'below' as well
bkm    = NULL, # bookmark for referencing in word document
table.object  = NULL # docx file with a table or object like generated by dataframe2table
){
# If table text does not end with a '.', add it
if(grepl('\\.$', title) == FALSE){
title <- paste0(title, '.')
}
# Check if caption ends with '.'. If not, add it
if(!is.null(caption) && grepl('\\.$', caption) == FALSE){
caption <- paste0(caption, '.')
}
# vector of bookmarks, check if bookmark already exists
if(is.null(bkm.tab.list)){
bkm.tab.list <<- c(bkm)
}else{
# check if it already is in the list
# if so, stop execution and give this information
if(bkm %in% bkm.tab.list){
stop(paste0('Bookmark name (', bkm, ') already taken'))
}
# if not, add it
bkm.tab.list <<- c(bkm.tab.list, bkm)
}
#
if(position.title == 'below'){
position.caption = 'below'
}
# Add table
run_num    <- run_autonum(seq_id = "table", pre_label = "Table ", post_label = ": ",
bkm = bkm, bkm_all = TRUE, prop = NULL)
Title.0pt <- block_caption(title, style = "Title.0pt", autonum = run_num)  # 0pt paragraph after table title
Title.6pt <- block_caption(title, style = "Title.6pt", autonum = run_num)  # 6pt paragraph after table title
# Write
if(position.title == 'above' & position.caption == 'above'){
# Title - caption - Table
report   <- body_add(report, Title.0pt)
if(!is.null(caption)){report <- body_add_par(x = report, value = caption, style = "Caption.0pt")}
if(is.character(table.object)){
report     <- body_add_docx(x = report, src = table.object)
}else{
report     <- body_add_flextable(x = report, value = table.object, align = "left")
}
}else if(position.title == 'above' & position.caption == 'below'){
# Title - Table - caption
report   <- body_add(report, Title.0pt)
if(is.character(table.object)){
report     <- body_add_docx(x = report, src = table.object)
}else{
report     <- body_add_flextable(x = report, value = table.object, align = "left")
}
if(!is.null(caption)){report <- body_add_par(x = report, value = caption, style = "Caption.6pt")}
}else if(position.title == 'below'){
# Table - Title - caption - source
if(is.character(table.object)){
report     <- body_add_docx(x = report, src = table.object)
}else{
report     <- body_add_flextable(x = report, value = table.object, align = "left")
}
if(!is.null(caption)){
report   <- body_add(report, Title.0pt)
report <- body_add_par(x = report, value = caption, style = "Caption.6pt")
}else{
report   <- body_add(report, Title.6pt)
}
}else{
stop('Check add_table functionality ')
}
return(report)
}
# -----------------------------------------------------------------------------/
# _ Section break function                                                  ----
# -----------------------------------------------------------------------------/
end_section <- function(report,
orientation = "portrait" # Orientation of the section you are ending
# portrait or landscape
){
section_port <- prop_section(page_size = page_size(orient = orientation),
type = "nextPage")
report <- body_end_block_section(x = report,
value = block_section(section_port))
return(report)
}
# -----------------------------------------------------------------------------/
#                                                                              /
# Build report                                                              ----
#                                                                              /
# -----------------------------------------------------------------------------/
# -----------------------------------------------------------------------------/
# _ Create report based on report template                                  ----
# -----------------------------------------------------------------------------/
report <- read_docx(path = template.file)
# Styles to be used with style =
# styles_info(report)
# Body Text: normal text paragraph
# heading 1, heading 2, ...: different title levels
# tableCap  : table captions
# figureCap : figure captions
# HTML Preformatted  : Program codes
# figNote: note below tables or figures (indicating the source)
# List Paragraph: numbered list (manually created in the Word template)
# Centered Par: centered paragrpah to put figures in
# -----------------------------------------------------------------------------/
# _ Table of contents                                                       ----
# -----------------------------------------------------------------------------/
report <- add_header(report, text = "Table of contents", style = "heading 1")
report <- body_add_toc(x = report, level = 3)
report <- add_break(report)
# -----------------------------------------------------------------------------/
# _ TOC of figures                                                          ----
# -----------------------------------------------------------------------------/
report <- add_header(report, text = "List of figures", style = "heading 1")
toc    <- block_toc(level = 1, seq_id = 'figure', separator = ",")
report <- body_add(report, toc)
#report <- body_add_toc(x = report, level = 1, separator = ",", style = "figureCap")
report <- add_break(report)
# -----------------------------------------------------------------------------/
# _ TOC of tables                                                           ----
# -----------------------------------------------------------------------------/
report <- add_header(report, text = "List of tables", style = "heading 1")
toc    <- block_toc(level = 1, seq_id = 'table', separator = ",")
report <- body_add(report, toc)
#report <- body_add_toc(x = report, level = 1, separator = ",", style = "tableCap")
report <- add_break(report)
# -----------------------------------------------------------------------------/
# _ Abbreviations                                                           ----
# -----------------------------------------------------------------------------/
report <- add_header(report, text = "Abbreviations", style = "heading 1")
table.object <- dataFrame2table(data.source = "../text/abbreviations.txt",
type = "path",
output.name = "",
v.border = 0,
h.border = 0,
font.size = tfs,
font.name = "Arial",
align.t = "l",
doc.landscape = FALSE,
sort = 1,
col_keys = c(),
header.names = list(),
digits = 1,
merge.col.names = "none",
padding = "d",
rotate  = "n",
header.ht = "d",
col.width = "d",
col.width.j = c(),
add.footer.script = FALSE)
report <- add_table(report, table.object = table.object,
title = 'Abbreviations',
bkm = 'TAB_abbrev')
report     <- body_add_break(x = report)
# -----------------------------------------------------------------------------/
# _ Executive summary                                                              ----
# -----------------------------------------------------------------------------/
report <- add_header(report, text  = "Executive summary", style = "heading 1")
report <- add_section(report, "../text/executive.summary.docx")
# -----------------------------------------------------------------------------/
# _ Introduction                                                              ----
# -----------------------------------------------------------------------------/
report <- add_header(report, text  = "Introduction", style = "heading 1")
report <- add_section(report, "../text/introduction.docx")
source("G:/Shared drives/LYO-X-UTILITIES/LYOXtoolbox/Mlx-REPORT/Mlx-scaling-report/Report-docx-inputs-1.8 - Copy/Report/pgm/generate-report-scaling.R", echo=TRUE)
source("G:/Shared drives/LYO-X-UTILITIES/LYOXtoolbox/Mlx-REPORT/Mlx-scaling-report/Report-docx-inputs-1.8 - Copy/Report/pgm/generate-report-scaling.R", echo=TRUE)
source("G:/Shared drives/LYO-X-UTILITIES/LYOXtoolbox/Mlx-REPORT/Mlx-scaling-report/Report-docx-inputs-1.8 - Copy/Report/pgm/generate-report-scaling.R", echo=TRUE)
source("G:/Shared drives/LYO-X-UTILITIES/LYOXtoolbox/Mlx-REPORT/Mlx-scaling-report/Report-docx-inputs-1.8 - Copy/Report/pgm/generate-report-scaling.R", echo=TRUE)
pk.final.model.fig.dir
source("G:/Shared drives/LYO-X-UTILITIES/LYOXtoolbox/Mlx-REPORT/Mlx-scaling-report/Report-docx-inputs-1.8 - Copy/Report/pgm/generate-report-scaling.R", echo=TRUE)
getwd()
source("G:/Shared drives/LYO-X-UTILITIES/LYOXtoolbox/Mlx-REPORT/Mlx-scaling-report/Report-docx-inputs-1.8 - Copy/Report/pgm/generate-report-scaling.R", echo=TRUE)
source("G:/Shared drives/LYO-X-UTILITIES/LYOXtoolbox/Mlx-REPORT/Mlx-scaling-report/Report-docx-inputs-1.8 - Copy/Report/pgm/generate-report-scaling.R", echo=TRUE)
source("G:/Shared drives/LYO-X-UTILITIES/LYOXtoolbox/Mlx-REPORT/Mlx-scaling-report/Report-docx-inputs-1.8 - Copy/Report/pgm/generate-report-scaling.R", echo=TRUE)
source("G:/Shared drives/LYO-X-UTILITIES/LYOXtoolbox/Mlx-REPORT/Mlx-scaling-report/Report-docx-inputs-1.8 - Copy/Report/pgm/generate-report-scaling.R", echo=TRUE)
getwd()
setwd("G:/Shared drives/LYO-X-UTILITIES/LYOXtoolbox/Mlx-REPORT/Mlx-scaling-report/Report-docx-inputs-1.8 - Copy/Report/pgm")
source("G:/Shared drives/LYO-X-UTILITIES/LYOXtoolbox/Mlx-REPORT/Mlx-scaling-report/Report-docx-inputs-1.8 - Copy/Report/pgm/generate-report-scaling.R", echo=TRUE)
source("G:/Shared drives/LYO-X-UTILITIES/LYOXtoolbox/Mlx-REPORT/Mlx-scaling-report/Report-docx-inputs-1.8 - Copy/Report/pgm/generate-report-scaling.R", echo=TRUE)
pk.final.model.dir
source("G:/Shared drives/LYO-X-UTILITIES/LYOXtoolbox/Mlx-REPORT/Mlx-scaling-report/Report-docx-inputs-1.8 - Copy/Report/pgm/generate-report-scaling.R", echo=TRUE)
source("G:/Shared drives/LYO-X-UTILITIES/LYOXtoolbox/Mlx-REPORT/Mlx-scaling-report/Report-docx-inputs-1.8 - Copy/Report/pgm/generate-report-scaling.R", echo=TRUE)
---
title: "My Report"
# Clear workspace
rm(list = ls())
# Get file location and name
activedoc <- rstudioapi::getActiveDocumentContext()$path
# Set the working directory to the file location
setwd(dirname(activedoc))
# Clear workspace
rm(list = ls())
# Get file location and name
activedoc <- rstudioapi::getActiveDocumentContext()$path
# Set the working directory to the file location
setwd(dirname(activedoc))
activedoc <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(activedoc))
# document function
devtools::document()
# upload function
setwd("LYOX.functions/")
# to set up new function from scratch
#use_r("dataFrame2table.R")
# document function
devtools::document()
# load everything into the package
load_all()
# Clear workspace
rm(list = ls())
# Get file location and name
activedoc <- rstudioapi::getActiveDocumentContext()$path
# Set the working directory to the file location
setwd(dirname(activedoc))
# load libraries
library(usethis)
library(devtools)
# upload function
setwd("LYOX.functions/")
# to set up new function from scratch
#use_r("dataFrame2table.R")
# document function
devtools::document()
# load everything into the package
load_all()
?LYOX.functions::trapz
?LYOX.functions::dataFrame2table
libraryLY
library(LYOX.functions)
